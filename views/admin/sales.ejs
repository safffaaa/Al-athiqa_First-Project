
<%- include('./head') %>

<div class="details">
    <div class="recentOrders">
        <div class="container cardHeader">
            <h3 class="p-1">Sales Report</h3>
            <div class="d-flex justify-content-end">
                <button type="button" id="downloadReportButton" class="btn btn-outline-dark">Download Sales Report</button>
            </div>
        </div>

        <div class="modal fade" id="salesReportModal" tabindex="-1" aria-labelledby="salesReportModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="salesReportModalLabel">Sales Report</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" id="closebtn" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form action="/salesReportDownload" method="post">
                            <span class="text-danger" id="error"></span>
                            <div class="mb-3">
                                <label for="startDate" class="form-label">Start Date:</label>
                                <input type="date" name="startDate" class="form-control" onchange="dateValidation()" id="startDate" required>
                            </div>
                            <div class="mb-3">
                                <label for="endDate" class="form-label">End Date:</label>
                                <input type="date" name="endDate" class="form-control" id="endDate" onchange="dateValidation()" required>
                            </div>

                            <div class="modal-footer">
                                <button type="submit" class="btn btn-outline-primary" onclick="loader()" id="downBtn">Download Report</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="container mt-4">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card mb-4 shadow" style="background-color: #fff;">
                        <h2 class="card-header">Sales Analysis</h2>
                        <div class="card-body">
                            <div class="row">
                                <div class="dropdown show">
                                    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="timeIntervalDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        By Day
                                    </a>

                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                        <a class="dropdown-item" id="byDayOption">Day</a>
                                        <a class="dropdown-item" id="byMonthOption">Month</a>
                                        <a class="dropdown-item" id="byYearOption">Year</a>
                                    </div>
                                </div>
                                <div class="col-lg-12">
                                    <canvas id="salesGraphAmount"></canvas>
                                </div>
                                <div class="col-lg-12">
                                    <canvas id="salesGraphCount"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


<script>
    // Validation for the date for download 
    function dateValidation() {
                var startDate = new Date(document.getElementById('startDate').value);
                var endDate = new Date(document.getElementById('endDate').value);
                const currentDate = new Date();
                var downBtn = document.getElementById('downBtn');
                var error = document.getElementById('error');
                if (startDate > currentDate) {
                    error.innerHTML = 'Invalid date range: Start date cannot be in the future.';
                    downBtn.style.display = 'none';
                } else if (endDate >= currentDate) {
                    error.innerHTML = 'Invalid date range: End date cannot be in the future.';
                    downBtn.style.display = 'none';
                } else if (startDate > endDate) {
                    error.innerHTML = 'Invalid date range: Start date cannot be after end date.';
                    downBtn.style.display = 'none';
                } else {
                    error.innerHTML = '';
                    downBtn.style.display = 'block';
                }
            }
        
            // Function for timer of download sales report
            function loader() {
                let timerInterval;
                Swal.fire({
                    title: "Auto close toast!",
                    html: "I will close in <b></b> milliseconds.",
                    timer: 2000,
                    timerProgressBar: true,
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                        const timer = Swal.getPopup().querySelector("b");
                        timerInterval = setInterval(() => {
                            timer.textContent = `${Swal.getTimerLeft()}`;
                        }, 100);
                    },
                    willClose: () => {
                        clearInterval(timerInterval);
                    }
                }).then((result) => {
                    if (result.dismiss === Swal.DismissReason.timer) {
                        console.log("I was closed by the timer");
                    }
                });
            }
        
            // Script for showing the modal of calendar for the sales download button
            document.addEventListener('DOMContentLoaded', function () {
                var modalButton = document.querySelector('#downloadReportButton');
                var closebtn = document.querySelector('#closebtn');
                var salesReportModal = new bootstrap.Modal(document.getElementById('salesReportModal'));
                modalButton.addEventListener('click', function () {
                    salesReportModal.show();
                });
                closebtn.addEventListener('click', function () {
                    salesReportModal.hide();
                });
                var salesReportForm = document.getElementById('salesReportForm');
                salesReportForm.addEventListener('submit', function (event) {
                    event.preventDefault();
                    var startDate = document.getElementById('startDate').value;
                    var endDate = document.getElementById('endDate').value;
                    var fileType = document.getElementById('fileType').value;
                    salesReportModal.hide();
                });
            });
        
            // Event listener for the selection of graph for periods
            updateSalesGraph("day");
        
            document.getElementById("byDayOption").addEventListener("click", function () {
                document.getElementById("timeIntervalDropdown").textContent = "By Day";
                updateSalesGraph("day");
            });
        
            document.getElementById("byMonthOption").addEventListener("click", function () {
                document.getElementById("timeIntervalDropdown").textContent = "By Month";
                updateSalesGraph("month");
            });
        
            document.getElementById("byYearOption").addEventListener("click", function () {
                document.getElementById("timeIntervalDropdown").textContent = "By Year";
                updateSalesGraph("year");
            });
        
            // Function for picking the sales report interval
            async function fetchSalesData(timeInterval) {
                try {
                    let response;
                    if (timeInterval === "day") {
                        response = await fetch('/countByday');
                    } else if (timeInterval === "month" || timeInterval === "year") {
                        response = await fetch(`/countBy${timeInterval}`);
                    } else {
                        return false;
                    }
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }
        
            async function fetchOrdersAndSales() {
                try {
                    const response = await fetch("/NewSales");
                    if (!response.ok) {
                        throw new Error("Network response was not ok" );
                    }
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.log("Error fetching data", error);
                }
            }
        
            async function updateSalesGraph(timeInterval) {
                const salesData = await fetchSalesData(timeInterval);
                const Amount = document.getElementById("salesGraphAmount").getContext("2d");
                const Count = document.getElementById("salesGraphCount").getContext("2d");
        
                if (window.myChart1) {
                    window.myChart1.destroy();
                }
                if (window.myChart2) {
                    window.myChart2.destroy();
                }
        
                window.myChart1 = new Chart(Amount, {
                    type: "line",
                    data: {
                        labels: salesData.labelsByCount,
                        datasets: [{
                            label: "Sales by orders",
                            data: salesData.dataByCount,
                            borderColor: "green",
                            fill: false
                        }]
                    },
                    options: {
                        legend: { display: false },
                        elements: {
                            line: {
                                tension: 0.4
                            }
                        },
                        hover: {
                            mode: 'none' 
                            }
                    }
                });
        
                const barColors = ["red", "green", "blue", "orange", "brown"];
                window.myChart2 = new Chart(Count, {
                    type: "bar",
                    data: {
                        labels: salesData.labelsByAmount,
                        datasets: [{
                            label: "Sales by Amount",
                            data: salesData.dataByAmount,
                            backgroundColor: barColors,
                            borderColor: "white",
                            borderWidth: 3,
                        }],
                    },
                    options: {
                        scales: {
                            x: [{
                                grid: {
                                    display: true
                                }
                            }],
                            y: [{
                                beginAtZero: true,
                                maxTicksLimit: 5
                            }]
                        },
                        hover: { mode: null } 
                    },
                });
            }
            updateSalesGraph();

</script>

</script>

<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
    crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<%- include('./foot') %>
